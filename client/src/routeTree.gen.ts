/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AuthSigninRouteImport } from './routes/auth/signin'
import { Route as AdminPlacesRouteImport } from './routes/admin/places'
import { Route as AdminDestinationsRouteImport } from './routes/admin/destinations'
import { Route as AdminCategoriesRouteImport } from './routes/admin/categories'
import { Route as AdminAdsRouteImport } from './routes/admin/ads'
import { Route as AdminDestinationsDestinationIdPlacesRouteImport } from './routes/admin/destinations/$destinationId/places'
import { Route as AdminCategoriesCategoryIdPlacesRouteImport } from './routes/admin/categories/$categoryId/places'

const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminPlacesRoute = AdminPlacesRouteImport.update({
  id: '/places',
  path: '/places',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDestinationsRoute = AdminDestinationsRouteImport.update({
  id: '/destinations',
  path: '/destinations',
  getParentRoute: () => AdminRoute,
} as any)
const AdminCategoriesRoute = AdminCategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => AdminRoute,
} as any)
const AdminAdsRoute = AdminAdsRouteImport.update({
  id: '/ads',
  path: '/ads',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDestinationsDestinationIdPlacesRoute =
  AdminDestinationsDestinationIdPlacesRouteImport.update({
    id: '/$destinationId/places',
    path: '/$destinationId/places',
    getParentRoute: () => AdminDestinationsRoute,
  } as any)
const AdminCategoriesCategoryIdPlacesRoute =
  AdminCategoriesCategoryIdPlacesRouteImport.update({
    id: '/$categoryId/places',
    path: '/$categoryId/places',
    getParentRoute: () => AdminCategoriesRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/ads': typeof AdminAdsRoute
  '/admin/categories': typeof AdminCategoriesRouteWithChildren
  '/admin/destinations': typeof AdminDestinationsRouteWithChildren
  '/admin/places': typeof AdminPlacesRoute
  '/auth/signin': typeof AuthSigninRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/categories/$categoryId/places': typeof AdminCategoriesCategoryIdPlacesRoute
  '/admin/destinations/$destinationId/places': typeof AdminDestinationsDestinationIdPlacesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/ads': typeof AdminAdsRoute
  '/admin/categories': typeof AdminCategoriesRouteWithChildren
  '/admin/destinations': typeof AdminDestinationsRouteWithChildren
  '/admin/places': typeof AdminPlacesRoute
  '/auth/signin': typeof AuthSigninRoute
  '/admin': typeof AdminIndexRoute
  '/admin/categories/$categoryId/places': typeof AdminCategoriesCategoryIdPlacesRoute
  '/admin/destinations/$destinationId/places': typeof AdminDestinationsDestinationIdPlacesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/ads': typeof AdminAdsRoute
  '/admin/categories': typeof AdminCategoriesRouteWithChildren
  '/admin/destinations': typeof AdminDestinationsRouteWithChildren
  '/admin/places': typeof AdminPlacesRoute
  '/auth/signin': typeof AuthSigninRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/categories/$categoryId/places': typeof AdminCategoriesCategoryIdPlacesRoute
  '/admin/destinations/$destinationId/places': typeof AdminDestinationsDestinationIdPlacesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/admin/ads'
    | '/admin/categories'
    | '/admin/destinations'
    | '/admin/places'
    | '/auth/signin'
    | '/admin/'
    | '/admin/categories/$categoryId/places'
    | '/admin/destinations/$destinationId/places'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/ads'
    | '/admin/categories'
    | '/admin/destinations'
    | '/admin/places'
    | '/auth/signin'
    | '/admin'
    | '/admin/categories/$categoryId/places'
    | '/admin/destinations/$destinationId/places'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/admin/ads'
    | '/admin/categories'
    | '/admin/destinations'
    | '/admin/places'
    | '/auth/signin'
    | '/admin/'
    | '/admin/categories/$categoryId/places'
    | '/admin/destinations/$destinationId/places'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AuthSigninRoute: typeof AuthSigninRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/places': {
      id: '/admin/places'
      path: '/places'
      fullPath: '/admin/places'
      preLoaderRoute: typeof AdminPlacesRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/destinations': {
      id: '/admin/destinations'
      path: '/destinations'
      fullPath: '/admin/destinations'
      preLoaderRoute: typeof AdminDestinationsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/categories': {
      id: '/admin/categories'
      path: '/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/ads': {
      id: '/admin/ads'
      path: '/ads'
      fullPath: '/admin/ads'
      preLoaderRoute: typeof AdminAdsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/destinations/$destinationId/places': {
      id: '/admin/destinations/$destinationId/places'
      path: '/$destinationId/places'
      fullPath: '/admin/destinations/$destinationId/places'
      preLoaderRoute: typeof AdminDestinationsDestinationIdPlacesRouteImport
      parentRoute: typeof AdminDestinationsRoute
    }
    '/admin/categories/$categoryId/places': {
      id: '/admin/categories/$categoryId/places'
      path: '/$categoryId/places'
      fullPath: '/admin/categories/$categoryId/places'
      preLoaderRoute: typeof AdminCategoriesCategoryIdPlacesRouteImport
      parentRoute: typeof AdminCategoriesRoute
    }
  }
}

interface AdminCategoriesRouteChildren {
  AdminCategoriesCategoryIdPlacesRoute: typeof AdminCategoriesCategoryIdPlacesRoute
}

const AdminCategoriesRouteChildren: AdminCategoriesRouteChildren = {
  AdminCategoriesCategoryIdPlacesRoute: AdminCategoriesCategoryIdPlacesRoute,
}

const AdminCategoriesRouteWithChildren = AdminCategoriesRoute._addFileChildren(
  AdminCategoriesRouteChildren,
)

interface AdminDestinationsRouteChildren {
  AdminDestinationsDestinationIdPlacesRoute: typeof AdminDestinationsDestinationIdPlacesRoute
}

const AdminDestinationsRouteChildren: AdminDestinationsRouteChildren = {
  AdminDestinationsDestinationIdPlacesRoute:
    AdminDestinationsDestinationIdPlacesRoute,
}

const AdminDestinationsRouteWithChildren =
  AdminDestinationsRoute._addFileChildren(AdminDestinationsRouteChildren)

interface AdminRouteChildren {
  AdminAdsRoute: typeof AdminAdsRoute
  AdminCategoriesRoute: typeof AdminCategoriesRouteWithChildren
  AdminDestinationsRoute: typeof AdminDestinationsRouteWithChildren
  AdminPlacesRoute: typeof AdminPlacesRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAdsRoute: AdminAdsRoute,
  AdminCategoriesRoute: AdminCategoriesRouteWithChildren,
  AdminDestinationsRoute: AdminDestinationsRouteWithChildren,
  AdminPlacesRoute: AdminPlacesRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AuthSigninRoute: AuthSigninRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
