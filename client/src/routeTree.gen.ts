/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AuthSigninRouteImport } from './routes/auth/signin'
import { Route as AdminDestinationsRouteImport } from './routes/admin/destinations'
import { Route as AdminCategoriesRouteImport } from './routes/admin/categories'
import { Route as AdminDestinationsIndexRouteImport } from './routes/admin/destinations.index'
import { Route as AdminDestinationsDestinationIdPlacesRouteImport } from './routes/admin/destinations/$destinationId/places'

const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDestinationsRoute = AdminDestinationsRouteImport.update({
  id: '/destinations',
  path: '/destinations',
  getParentRoute: () => AdminRoute,
} as any)
const AdminCategoriesRoute = AdminCategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDestinationsIndexRoute = AdminDestinationsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminDestinationsRoute,
} as any)
const AdminDestinationsDestinationIdPlacesRoute =
  AdminDestinationsDestinationIdPlacesRouteImport.update({
    id: '/$destinationId/places',
    path: '/$destinationId/places',
    getParentRoute: () => AdminDestinationsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/destinations': typeof AdminDestinationsRouteWithChildren
  '/auth/signin': typeof AuthSigninRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/destinations/': typeof AdminDestinationsIndexRoute
  '/admin/destinations/$destinationId/places': typeof AdminDestinationsDestinationIdPlacesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/auth/signin': typeof AuthSigninRoute
  '/admin': typeof AdminIndexRoute
  '/admin/destinations': typeof AdminDestinationsIndexRoute
  '/admin/destinations/$destinationId/places': typeof AdminDestinationsDestinationIdPlacesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/destinations': typeof AdminDestinationsRouteWithChildren
  '/auth/signin': typeof AuthSigninRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/destinations/': typeof AdminDestinationsIndexRoute
  '/admin/destinations/$destinationId/places': typeof AdminDestinationsDestinationIdPlacesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/admin/categories'
    | '/admin/destinations'
    | '/auth/signin'
    | '/admin/'
    | '/admin/destinations/'
    | '/admin/destinations/$destinationId/places'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/categories'
    | '/auth/signin'
    | '/admin'
    | '/admin/destinations'
    | '/admin/destinations/$destinationId/places'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/admin/categories'
    | '/admin/destinations'
    | '/auth/signin'
    | '/admin/'
    | '/admin/destinations/'
    | '/admin/destinations/$destinationId/places'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AuthSigninRoute: typeof AuthSigninRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/destinations': {
      id: '/admin/destinations'
      path: '/destinations'
      fullPath: '/admin/destinations'
      preLoaderRoute: typeof AdminDestinationsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/categories': {
      id: '/admin/categories'
      path: '/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/destinations/': {
      id: '/admin/destinations/'
      path: '/'
      fullPath: '/admin/destinations/'
      preLoaderRoute: typeof AdminDestinationsIndexRouteImport
      parentRoute: typeof AdminDestinationsRoute
    }
    '/admin/destinations/$destinationId/places': {
      id: '/admin/destinations/$destinationId/places'
      path: '/$destinationId/places'
      fullPath: '/admin/destinations/$destinationId/places'
      preLoaderRoute: typeof AdminDestinationsDestinationIdPlacesRouteImport
      parentRoute: typeof AdminDestinationsRoute
    }
  }
}

interface AdminDestinationsRouteChildren {
  AdminDestinationsIndexRoute: typeof AdminDestinationsIndexRoute
  AdminDestinationsDestinationIdPlacesRoute: typeof AdminDestinationsDestinationIdPlacesRoute
}

const AdminDestinationsRouteChildren: AdminDestinationsRouteChildren = {
  AdminDestinationsIndexRoute: AdminDestinationsIndexRoute,
  AdminDestinationsDestinationIdPlacesRoute:
    AdminDestinationsDestinationIdPlacesRoute,
}

const AdminDestinationsRouteWithChildren =
  AdminDestinationsRoute._addFileChildren(AdminDestinationsRouteChildren)

interface AdminRouteChildren {
  AdminCategoriesRoute: typeof AdminCategoriesRoute
  AdminDestinationsRoute: typeof AdminDestinationsRouteWithChildren
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminCategoriesRoute: AdminCategoriesRoute,
  AdminDestinationsRoute: AdminDestinationsRouteWithChildren,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AuthSigninRoute: AuthSigninRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
